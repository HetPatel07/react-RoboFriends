{"version":3,"sources":["card.js","cardArray.js","searchBox.js","Scroll.js","ErrorBoundry.js","app.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardArray","robots","console","log","map","users","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","children","ErrorBoundry","state","hasError","error","info","this","setState","React","Component","App","onSearchChange","event","searchField","target","value","fetch","then","response","json","filteredRobots","filter","toLowerCase","includes","ReactDOM","render","document","getElementById"],"mappings":"wQAiBeA,EAfF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAE1B,OACE,sBAAKC,UAAY,4CAAjB,UACE,qBAAKC,IAAG,+BAA0BF,GAAMG,IAAI,WAC5C,gCACE,6BAAKL,IACL,4BAAIC,WCOGK,EAbG,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAUlB,OATEC,QAAQC,IAAIF,GAKUA,EAAOG,KAAI,SAACC,EAAMC,GACpC,OAAO,cAAC,EAAD,CAAMZ,KAAMO,EAAOK,GAAGZ,KAAMC,MAAOM,EAAOK,GAAGX,MAAOC,GAAIK,EAAOK,GAAGV,SCAlEW,G,MARG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAClB,OACE,8BACE,uBAAOX,UAAU,qBAAqBY,KAAK,SAASC,YAAY,gBAAgBC,SAAUH,QCWjFI,G,MAbA,SAACC,GAMd,OACE,qBAAKhB,UAAU,SAAf,SACGgB,EAAMC,aCWEC,E,kDAnBb,WAAYF,GAAQ,IAAD,8BACjB,cAAMA,IACDG,MAAQ,CACXC,UAAU,GAHK,E,qDAOnB,SAAkBC,EAAMC,GACpBC,KAAKC,SAAS,CAACJ,UAAU,M,oBAE7B,WACE,OAAIG,KAAKJ,MAAMC,SACN,8CAEAG,KAAKP,MAAMC,a,GAfGQ,IAAMC,WC4DlBC,E,kDArDb,WAAYX,GAAQ,IAAD,8BACjB,cAAMA,IAORY,eAAiB,SAACC,GAGhB,EAAKL,SAAS,CAAEM,YAAaD,EAAME,OAAOC,SAT1C,EAAKb,MAAQ,CACXf,OAAQ,GACR0B,YAAa,IAJE,E,qDAwBnB,WAAqB,IAAD,OAClBG,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAAC1B,GACL,EAAKgB,SAAS,CACZpB,OAAQI,S,oBAIhB,WAAU,IAAD,OACD6B,EAAiBd,KAAKJ,MAAMf,OAAOkC,QAAO,SAAClC,GAC/C,OAAOA,EAAOP,KACX0C,cACAC,SAAS,EAAKrB,MAAMW,YAAYS,kBAErC,OACE,sBAAKvC,UAAU,KAAf,UACE,oBAAIA,UAAU,KAAd,4BACA,cAAC,EAAD,CAAWW,aAAcY,KAAKK,eAAgBE,YAAY,KAC1D,cAAC,EAAD,UACE,cAAC,EAAD,UACE,cAAC,EAAD,CAAU1B,OAAQiC,e,GA9CZZ,IAAMC,W,MCCxBe,IAASC,OAAO,cAAC,EAAD,IACdC,SAASC,eAAe,W","file":"static/js/main.d047c5c5.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Card = ({name, email, id}) => {\r\n    // console.log(robots);    \r\n  return (\r\n    <div className = \"dib bg-light-red br3 grow ma3 tc shadow-5\">\r\n      <img src={`https://robohash.org/${id}`} alt=\"robots\" />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./card\";\r\n\r\nconst CardArray = ({robots}) => {\r\n    console.log(robots);\r\n\r\n    // if(true){\r\n    //   throw new Error(\"bhagg\");\r\n    // }\r\n    const cardComponent = robots.map((users,i) => {\r\n        return <Card name={robots[i].name} email={robots[i].email} id={robots[i].id} />\r\n    });\r\n    \r\n  return cardComponent;\r\n};\r\n\r\nexport default CardArray;\r\n","import React from \"react\";\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n  return (\r\n    <div> \r\n      <input className=\"pa3 bg-light-blue \" type=\"search\" placeholder=\"Search Robots\" onChange={searchChange}/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\nimport \"./scroll.css\"\r\n\r\nconst Scroll = (props) => {\r\n  // const scrollStyle = {\r\n  //   overflowY : 'scroll',\r\n  //   height: \"800px\",\r\n  //   scrollbarWidth: \"none\",\r\n  // }\r\n  return (\r\n    <div className=\"scroll\">\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","import React from \"react\";\r\n\r\nclass ErrorBoundry extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false,\r\n    };\r\n  }\r\n\r\n  componentDidCatch(error,info){\r\n      this.setState({hasError: true});\r\n  }\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Oooooppppsss</h1>;\r\n    } else {\r\n      return this.props.children;\r\n    }\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry","import React from \"react\";\r\nimport CardList from \"./cardArray\";\r\n// import { robots } from \"./robots\";\r\nimport \"./app.css\";\r\nimport SearchBox from \"./searchBox\";\r\nimport Scroll from \"./Scroll\";\r\nimport ErrorBoundry from \"./ErrorBoundry\";\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      robots: [],\r\n      searchField: \"\",\r\n    };\r\n  }\r\n\r\n  onSearchChange = (event) => {\r\n    //   console.log(event.target.value);\r\n    //   this.setState({searchFiels: event.target.value});\r\n    this.setState({ searchField: event.target.value });\r\n\r\n    // this.setState({ robots: filteredRobots });\r\n\r\n    // console.log(filteredRobots);\r\n    //   this.setState({\r\n    //       robots:\r\n    //       {\r\n    //           robots.filter()\r\n    //       },\r\n    //       searchField: event.target.value});\r\n  };\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then((response) => response.json())\r\n      .then((users) => {\r\n        this.setState({\r\n          robots: users,\r\n        });\r\n      });\r\n  }\r\n  render() {\r\n    const filteredRobots = this.state.robots.filter((robots) => {\r\n      return robots.name\r\n        .toLowerCase()\r\n        .includes(this.state.searchField.toLowerCase());\r\n    });\r\n    return (\r\n      <div className=\"tc\">\r\n        <h1 className=\"f1\"> Robo Friends </h1>\r\n        <SearchBox searchChange={this.onSearchChange} searchField=\"\" />\r\n        <Scroll>\r\n          <ErrorBoundry>\r\n            <CardList robots={filteredRobots} />\r\n          </ErrorBoundry>\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n// import Card from \"./card\";\nimport App from \"./app\";\n\nimport 'tachyons';\n// import reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(<App/>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}